//
// auto-generated by op2.py
//

// global constants
double smoothing_coefficient_ompkernel;
double ff_variable_ompkernel[5];
double ff_flux_contribution_momentum_x_ompkernel[3];
double ff_flux_contribution_momentum_y_ompkernel[3];
double ff_flux_contribution_momentum_z_ompkernel[3];
double ff_flux_contribution_density_energy_ompkernel[3];
int mesh_name_ompkernel;

// header
#include "op_lib_cpp.h"

void op_decl_const_char(int dim, char const *type,
  int size, char *dat, char const *name){
  if(!strcmp(name, "smoothing_coefficient")) {
    memcpy(&smoothing_coefficient_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:smoothing_coefficient_ompkernel)
  } else if(!strcmp(name, "ff_variable")) {
    memcpy(ff_variable_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:ff_variable_ompkernel[:5])
  } else if(!strcmp(name, "ff_flux_contribution_momentum_x")) {
    memcpy(ff_flux_contribution_momentum_x_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:ff_flux_contribution_momentum_x_ompkernel[:3])
  } else if(!strcmp(name, "ff_flux_contribution_momentum_y")) {
    memcpy(ff_flux_contribution_momentum_y_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:ff_flux_contribution_momentum_y_ompkernel[:3])
  } else if(!strcmp(name, "ff_flux_contribution_momentum_z")) {
    memcpy(ff_flux_contribution_momentum_z_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:ff_flux_contribution_momentum_z_ompkernel[:3])
  } else if(!strcmp(name, "ff_flux_contribution_density_energy")) {
    memcpy(ff_flux_contribution_density_energy_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:ff_flux_contribution_density_energy_ompkernel[:3])
  } else if(!strcmp(name, "mesh_name")) {
    memcpy(&mesh_name_ompkernel, dat, dim*size);
  #pragma omp target enter data map(to:mesh_name_ompkernel)
  }
}
// user kernel files
#include "initialize_variables_kernel_omp4kernel_func.cpp"
#include "zero_5d_array_kernel_omp4kernel_func.cpp"
#include "zero_1d_array_kernel_omp4kernel_func.cpp"
#include "calculate_cell_volumes_omp4kernel_func.cpp"
#include "dampen_ewt_omp4kernel_func.cpp"
#include "copy_double_kernel_omp4kernel_func.cpp"
#include "calculate_dt_kernel_omp4kernel_func.cpp"
#include "get_min_dt_kernel_omp4kernel_func.cpp"
#include "compute_step_factor_kernel_omp4kernel_func.cpp"
#include "compute_flux_edge_kernel_omp4kernel_func.cpp"
#include "compute_bnd_node_flux_kernel_omp4kernel_func.cpp"
#include "time_step_kernel_omp4kernel_func.cpp"
#include "indirect_rw_kernel_omp4kernel_func.cpp"
#include "residual_kernel_omp4kernel_func.cpp"
#include "calc_rms_kernel_omp4kernel_func.cpp"
#include "count_bad_vals_omp4kernel_func.cpp"
#include "up_pre_kernel_omp4kernel_func.cpp"
#include "up_kernel_omp4kernel_func.cpp"
#include "up_post_kernel_omp4kernel_func.cpp"
#include "down_v2_kernel_pre_omp4kernel_func.cpp"
#include "down_v2_kernel_omp4kernel_func.cpp"
#include "down_v2_kernel_post_omp4kernel_func.cpp"
#include "down_kernel_omp4kernel_func.cpp"
#include "identify_differences_omp4kernel_func.cpp"
#include "count_non_zeros_omp4kernel_func.cpp"
