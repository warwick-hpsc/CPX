//
// auto-generated by op2.py
//

#include <math.h>
#include "const.h"

void down_v2_kernel_post_omp4_kernel(
  double *data0,
  int dat0size,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  int count,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size],data2[0:dat2size],data3[0:dat3size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    const double* residuals1_prolonged = &data0[5*n_op];
    const double* residuals1_prolonged_wsum = &data1[1*n_op];
    const double* residuals2 = &data2[5*n_op];
    double* variables2 = &data3[5*n_op];

    //inline function
    


      for (int i=0; i<NVAR; i++) {
          variables2[i] += residuals2[i] - (residuals1_prolonged[i] / (*residuals1_prolonged_wsum));
      }
    //end inline func
  }

}
