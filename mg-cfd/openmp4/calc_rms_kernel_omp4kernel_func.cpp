//
// auto-generated by op2.py
//

#include "utils.h"

void calc_rms_kernel_omp4_kernel(
  double *data0,
  int dat0size,
  double *arg1,
  int count,
  int num_teams,
  int nthread){

  double arg1_l = *arg1;
  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size])\
    map(tofrom: arg1_l) reduction(+:arg1_l)
  #pragma omp distribute parallel for schedule(static,1) reduction(+:arg1_l)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    const double* residual = &data0[5*n_op];
    double* rms = &arg1_l;

    //inline function
    
      for (int i=0; i<NVAR; i++) {
          *rms += residual[i]*residual[i];
      }
    //end inline func
  }

  *arg1 = arg1_l;
}
