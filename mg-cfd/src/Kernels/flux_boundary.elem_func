// Copyright 2009, Andrew Corrigan, acorriga@gmu.edu
// This code is from the AIAA-2009-4001 paper

// inline void compute_boundary_flux_edge_kernel(
//     const double *variables_b,
//     const double *edge_weight,
//     double *fluxes_b)

    double p_b = variables_b[VAR_DENSITY];

    #ifdef IDIVIDE
    double ip_b = 1.0 / p_b;
    #endif

    double pe_b, pressure_b;
    double3 velocity_b, momentum_b;
    double flux_contribution_i_momentum_x_b[NDIM],
           flux_contribution_i_momentum_y_b[NDIM],
           flux_contribution_i_momentum_z_b[NDIM],
           flux_contribution_i_density_energy_b[NDIM];

    momentum_b.x = variables_b[VAR_MOMENTUM+0];
    momentum_b.y = variables_b[VAR_MOMENTUM+1];
    momentum_b.z = variables_b[VAR_MOMENTUM+2];
    pe_b = variables_b[VAR_DENSITY_ENERGY];

    #ifdef IDIVIDE
    compute_velocity(ip_b, momentum_b, velocity_b);
    #else
    compute_velocity(p_b, momentum_b, velocity_b);
    #endif

    double speed_sqd_b = compute_speed_sqd(velocity_b);
    double speed_b = std::sqrt(speed_sqd_b);
    pressure_b = compute_pressure(p_b, pe_b, speed_sqd_b);

    #ifdef IDIVIDE
    double speed_of_sound_b = compute_speed_of_sound(ip_b, pressure_b);
    #else
    double speed_of_sound_b = compute_speed_of_sound(p_b, pressure_b);
    #endif

    compute_flux_contribution(p_b, momentum_b, pe_b,
        pressure_b, velocity_b,
        flux_contribution_i_momentum_x_b,
        flux_contribution_i_momentum_y_b,
        flux_contribution_i_momentum_z_b,
        flux_contribution_i_density_energy_b);

    fluxes_b[VAR_DENSITY]        += 0;
    fluxes_b[VAR_MOMENTUM +0]    += edge_weight[0]*pressure_b;
    fluxes_b[VAR_MOMENTUM +1]    += edge_weight[1]*pressure_b;
    fluxes_b[VAR_MOMENTUM +2]    += edge_weight[2]*pressure_b;
    fluxes_b[VAR_DENSITY_ENERGY] += 0;
