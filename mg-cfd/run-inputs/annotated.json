{
    "run": {
        "data dirpath comment": "[Required] Directory path to folder containing input hdf5 files and input.dat",
        "data dirpath": "./dirpath/to/input/HDF5/deck",

        "unit walltime comment": "[Optional] Runtime of a single multigrid cycle of this dataset on a single core of Intel Xeon. Used to estimate job scheduling walltime.",
        "unit walltime": 1.0,



        "general tasks comment": "Although each of the following task/node parameters are optional, either 'num nodes' or 'num tasks' should be defined.",
        "num nodes comment": "[Optional, Iterable] Node counts to run at",
        "num nodes": [1], 

        "num tasks comment": "[Optional, Iterable] Number of MPI tasks to execute total",
        "num tasks": [1],

        "num tasks per node comment": "[Optional, Iterable] Number of MPI tasks to execute on each node",
        "num tasks per node": [1],

        "num threads per task comment": "[Optional, Iterable] Number of OpenMP threads to assign to each MPI tasks (count includes the master thread/task)",
        "num threads per task": [1],



        "num repeats comment": "[Optional] Number of runs at each distinct job configuration",
        "num repeats": 1,

        "mg cycles comment": "[Optional] Number of multigrid cycles to perform.",
        "mg cycles": 10,


        "partitioners comment": "[Optional, Iterable] Which partitioners to use. Supported are 'parmetis', 'ptscotch', 'inertial'",
        "partitioners": ["parmetis"],

        "partitioner methods comment": "[Optional, Iterable] Which partitioner methods to use. Options are 'geom', 'kway', 'geomkway'. Some combinations of partitioner and method are incompatible, gen_job.py will state this.",
        "partitioner methods": ["geom", "kway", "geomkway"], 


        "validate solution comment": "[Optional] Toggle whether to compare final grid state against a precomputed solution. Check STDOUT for pass/fail status.",
        "validate solution": false,


        "comment on list-type parameters": "Python job generator iterates over the cartesian product of them."
    },

    "compile": {
        "compiler comment": "[Required] Which compiler to use. Supported are 'intel', 'gnu', 'clang', 'pgi', 'xl'",
        "compiler": "intel",
        
        "cpp/mpicpp wrapper comment": "[Optional] If target system requires use of a wrapper around compiler (eg Archer), state that here",
        "cpp wrapper": "",
        "mpicpp wrapper": "",

        "general parallelism comment": "If possible, enabled modes below will be combined; if not, gen_job.py will complain. At least one mode should be requested.",
        "mpi comment": "Toggle whether to use MPI",
        "mpi": true,
        "cuda comment": "Toggle whether to use CUDA",
        "cuda": false,
        "openmp comment": "Toggle whether to use OpenMP",
        "openmp": false,
        "openacc comment": "Toggle whether to use OpenACC",
        "openacc": false
    },

    "setup": {
        "jobs dir comment": "[Required] Directory path to folder containing created jobs.",
        "jobs dir": "./dirpath/to/generated/jobs",

        "job scheduler comment": "[Required] Specify job scheduler. Supported are 'slurm', 'moab', 'lsf', 'pbs'. Alternatively, set as empty string '' for local execution.", 
        "job scheduler": "", 

        "partition comment": "[Required] Specify which job queue to target",
        "partition": "",

        "project code comment": "[Optional] Specify which project code to use",
        "project code": ""
    }
}
